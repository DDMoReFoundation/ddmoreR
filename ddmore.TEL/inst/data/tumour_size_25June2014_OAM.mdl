# nt2mdl 1.047 beta Nick Holford n.holford@auckland.ac.nz
tumour_size_ORG_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="h")
      AMT=list(type=continuous,units="mg")
      DV=list(type=continuous)
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      myData=list(
           file="tumour_exposure.csv",
           inputformat=nonmemFormat)
   }# end SOURCE
} # end data object

tumour_size_ORG_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      POP_SIZE0=list(value=6.66,lo=1,hi=10) # cm
      POP_TOVER=list(value=18.9,lo=1,hi=200) # week
      POP_AE50=list(value=11700.,lo=1,hi=100000) # mg
      POP_TEQ=list(value=8.27,lo=1,hi=100000) # week
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      PPV_SIZE0=list(value=0.317 ,type=VAR)
      PPV_TOVER=list(value=0.082 ,type=VAR)
      PPV_AE50=list(value=1.9 ,type=VAR)
      RUV_CV=list(value=0.0358 ,type=VAR)
      RUV_SD=list(value=0.0125 ,type=VAR) # cm^2

   }# end VARIABILITY

} # end of parameter object

tumour_size_ORG_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="h")
      AMT=list(use=amt,units="mg")
      DV=list(type=continuous,use=dv,level=1)
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      POP_SIZE0
      POP_TOVER
      POP_AE50
      POP_TEQ
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      PPV_SIZE0
      PPV_TOVER
      PPV_AE50
      RUV_CV
      RUV_SD
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.


      GSIZE0=POP_SIZE0
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_SIZE0 ~ (type=normal, mean=0, var=PPV_SIZE0,level=ID)
      eta_PPV_TOVER ~ (type=normal, mean=0, var=PPV_TOVER,level=ID)
      eta_PPV_AE50 ~ (type=normal, mean=0, var=PPV_AE50,level=ID)
      eps_RUV_CV ~ (type=normal, mean=0, var=RUV_CV,level=DV)
      eps_RUV_SD ~ (type=normal, mean=0, var=RUV_SD,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

      SIZE0=GSIZE0*exp(eta_PPV_SIZE0)
      GTOVER=POP_TOVER*168 # week -> h
      TOVER=GTOVER*exp(eta_PPV_TOVER)
      # gemcitabine AMT in data is umole (263g/mole)
      GAE50=POP_AE50/263*1000 # mg -> umole
      AE50=GAE50*exp(eta_PPV_AE50)
      # time in data is hours
      GTEQ=POP_TEQ*168 # week -> h
      TEQ=GTEQ
      KOVER=1/TOVER
      RIN=SIZE0*KOVER
      KPD=ln(2)/TEQ
      S1=1

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


   ODE{
      # State variables for DE solver
      DAE=DRUG # amount in effect compartment
      DSIZE=TUMOUR # tumour size
      PD=1 - DAE/(AE50+DAE) # Emax pharmacodynamic model
      DRUG=ode(deriv= -KPD*DRUG ) # Bolus dose (in data) enters implicitly
      TUMOUR=ode(deriv= (RIN*PD - DSIZE*KOVER)*DSIZE,init=SIZE0)
   }# end ODE

   LIBRARY{
      amount=nmadvan(model=13,output=list(A,F))
   }# end LIBRARY

      # State variable solution
      AE=DRUG # amount in effect compartment
      SIZE=TUMOUR # tumour size
   #$TABLE ID TIME AMT CMT DV MDV DVID DOSE
   #AUCG AUCI AUCE TK0 SEX AGE RACE KPS STGE
   #NOAPPEND
   #ONEHEADER NOPRINT FILE=size.fit
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y = SIZE+SIZE*eps_RUV_CV+eps_RUV_SD
   }# end OBSERVATION

} # end of model object

tumour_size_ORG_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB TUMOUR EXPOSURE
; Tham LS, Wang L, Soo RA, Lee SC, Lee HS, Yong WP, Goh BC, Holford NH.
; A pharmacodynamic model for the time course of tumor shrinkage by gemcitabine +
; carboplatin in non-small cell lung cancer patients.
; Clin Cancer Res 2008; 14: 4213-8.
***} # end TARGET_CODE

# End TARGET specific code

   MODEL{
      tolrel=9
   }# end MODEL

   myEST=function(t,m,p,d) {
      EXECUTE{
         command="call nmgo tumour_size_ORG"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$EST MAX=9990 NSIG=3 SIGL=9 NOABORT PRINT=1
METHOD=CONDITIONAL INTERACTION
MSFO=size.msf
$COV
***} # end TARGET_CODE
            algo=list("FOCE  INTERACTION")
            cov=true
      }# end ESTIMATE
   }# end of myEST

}# end of task object

tumour_size_ORG_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NMTRAN_CODE

tumour_size_ORG_fit=tumour_size_ORG_task$myEST(t=NMTRAN_CODE, m=tumour_size_ORG_mdl, p=tumour_size_ORG_par, d=tumour_size_ORG_dat)

# Update parameter estimates with final estimates
tumour_size_ORG_par=update(tumour_size_ORG_fit,tumour_size_ORG_par)

} # end of task execution language code
