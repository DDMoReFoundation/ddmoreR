Day 29: Even more examples of how to extract data from the web

The following example is an introduction to XPath
which can be used for traversing an XML tree in a natural way.
The original data is found at:
http://www.w3schools.com/xml/cd_catalog.xml
I downloaded the data and saved it at:
http://www.stat.purdue.edu/~mdw/490M/cdcatalog.xml
Then I saved this file to my desktop.
If using Firefox, use the format "All Files" when saving.
The following command will save the XML code from the file
into the variable called doc

library(XML)
doc <- xmlRoot(xmlTreeParse("~/Desktop/cdcatalog.xml"))

You can also load this data directly from the web by:

doc <- xmlRoot(xmlTreeParse("http://www.stat.purdue.edu/~mdw/490M/cdcatalog.xml"))


Each child of the root contains information about a different song

doc[[1]]
doc[[2]]
doc[[3]]
doc[[4]]

There are 26 songs altogether

length(doc)

One very nice aspect of XML with useful names for the tags
is that we can refer to the data by its name, for instance
we can get the price of the 4th album as follows:

doc[[4]]$children
doc[[4]]$children$PRICE
xmlValue(doc[[4]]$children$PRICE)
as.numeric(xmlValue(doc[[4]]$children$PRICE))

We can write a little function to get the price of the nth album:

pricefunc <- function(n) as.numeric(xmlValue(doc[[n]]$children$PRICE))
pricefunc(15)

and then we can get the prices for all of the albums

apply( array(1:26), 1, pricefunc)

or the following code would work too

sapply(1:26, pricefunc)

We could have done this without defining a separate function:

apply( array(1:26), 1, function(n) as.numeric(xmlValue(doc[[n]]$children$PRICE)) )

or the following code would work too

sapply( 1:26, function(n) as.numeric(xmlValue(doc[[n]]$children$PRICE)) )

The students were asking for more information about
how to define a function in the middle of an apply or sapply.
Here are some little examples we did in class, on the fly:

sapply(1:10, sqrt)
sapply(1:10, function(x) sqrt(x) + 3)

mdw <- function(y) 25*y

sapply(1:10, mdw)
sapply(1:10, function(x) mdw(x) + 3)
sapply(1:10, function(x) x^2 + mdw(x) + 3 + 17*x)

For instance, here is a way to get the years of all the albums

apply( array(1:26), 1, function(n) as.numeric(xmlValue(doc[[n]]$children$YEAR)) )

we could also do

sapply( 1:26, function(n) as.numeric(xmlValue(doc[[n]]$children$YEAR)) )

########################################

Now we use XPath to parse the document,
instead of parsing the tree ourselves directly.

The XPath is more powerful but takes some time to learn.

We must begin by using a different function to get the XML code:

doc <- xmlInternalTreeParse("~/Desktop/cdcatalog.xml")

or we could use

doc <- xmlInternalTreeParse("http://www.stat.purdue.edu/~mdw/490M/cdcatalog.xml")

Then we use a function called getNodeSet to get the relevant
parts of the XML tree with the code that we are interested in

?getNodeSet

here is the entire catalog:

getNodeSet(doc, "//CATALOG")

here are the nodes for the separate albums:

getNodeSet(doc, "//CATALOG/CD")

here are the nodes for the prices:

getNodeSet(doc, "//CATALOG/CD/PRICE")

we can extract the xmlValues of each price:

sapply(getNodeSet(doc, "//CATALOG/CD/PRICE"),xmlValue)

instead of using the function xmlValue on each node,
we could use function(x) as.numeric(xmlValue(x))
so that we directly extract the numeric value of each price

sapply(getNodeSet(doc, "//CATALOG/CD/PRICE"),function(x) as.numeric(xmlValue(x)) )

there is a function to combine the sapply and the getNodeSet
called xpathSApply
so we can revise our code above as follows:

xpathSApply(doc, "//CATALOG/CD/PRICE", xmlValue)

xpathSApply(doc, "//CATALOG/CD/PRICE", function(x) as.numeric(xmlValue(x)) )

the xpathSApply command first uses an XPath,
and get applies a function, which is often an xmlValue function,
to extract the relevant values

?xpathSApply

########################################

We continue studying how to parse XML using R
The second example from today is originally selected from:

http://www.w3schools.com/XPath/xpath_examples.asp

You can download the XML code from the STAT 490M website
Just download the file bookexample.xml, download it in the format
"All Files" if you are using Firefox, and save it to the desktop
Then you can extract the code as follows:

doc <- xmlInternalTreeParse("~/Desktop/bookexample.xml")

We use some of the XPath code
which is discussed in Chapter 6 of the Learning XML book

First we select all titles of all the books:

xpathSApply(doc, "/bookstore/book/title", xmlValue)

we can select just the second book's title

xpathSApply(doc, "/bookstore/book[2]/title", xmlValue)

we can select the price of each book

xpathSApply(doc, "/bookstore/book/price", xmlValue)

we can modify this so that we get the price in numeric format

The following line is trouble; it does not do what we expect:

xpathSApply(doc, "/bookstore/book/price", as.numeric(xmlValue) )

This is better:

xpathSApply(doc, "/bookstore/book/price", function(x) as.numeric(xmlValue(x)) )

we can get the prices of all books that cost more than 30

xpathSApply(doc, "/bookstore/book[price>30]/price", xmlValue)

or the prices of all books that cost 30 or more

xpathSApply(doc, "/bookstore/book[price>=30]/price", xmlValue)

the following looks messy because we are selecting internal
nodes of the tree instead of a leaf node
so all of the data gets lumped together in a messy-looking way:

xpathSApply(doc, "/bookstore/book[price>=30]", xmlValue)

we can get the title of each book that costs 30 or more

xpathSApply(doc, "/bookstore/book[price>=30]/title", xmlValue)

we can get a node for each book, but as before, these are
internal nodes, so the result looks somewhat messy

xpathSApply(doc, "/bookstore/book", xmlValue)

the following gives all of the children of the book nodes:

xpathSApply(doc, "/bookstore/book/child::node()", xmlValue)

here are the authors of all the books;
notice that the authors are not separated by their individual books:

xpathSApply(doc, "/bookstore/book/author", xmlValue)

here are all of the nodes that are found two levels below
the bookstore node in the XML tree

xpathSApply(doc, "/bookstore/*/*/self::node()", xmlValue)

here are the children of the book written by J K. Rowling

xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/child::node()", xmlValue)

here are the nodes of the children of the books 
that are found before J K. Rowling's book in the list

xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/preceding-sibling::*/child::node()", xmlValue)

here are the nodes of the children of the books 
that are found after J K. Rowling's book in the list

xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/following-sibling::*/child::node()", xmlValue)

here are the nodes of the children of the books 
that are found after Giada De Laurentiis's book in the list

xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*/child::node()", xmlValue)

here are the authors of the books 
that are found after Giada De Laurentiis's book in the list

xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*/author", xmlValue)

here are the authors of the children's books 
that are found after Giada De Laurentiis's book in the list

xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*[@category='CHILDREN']/author", xmlValue)

here are the authors of the WEB books 
that are found after Giada De Laurentiis's book in the list

xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*[@category='WEB']/author", xmlValue)

here are the nodes of the children of the books
that are written by J K. Rowling

xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/child::node()", xmlValue)

here are the nodes of the children of the books
that are not written by J K. Rowling

xpathSApply(doc, "/bookstore/book[not(author='J K. Rowling')]/child::node()", xmlValue)

here are the nodes of the children of the 3rd book

xpathSApply(doc, "/bookstore/book[3]/child::node()", xmlValue)

here are the nodes of the children for all books except the third book

xpathSApply(doc, "/bookstore/book[position()!=3]/child::node()", xmlValue)

here are the node of the children for all books that are WEB books

xpathSApply(doc, "/bookstore/book[@category='WEB']/child::node()", xmlValue)
